<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Shadow</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = "D"; // What direction is the character facing?
run = false;
runningattack = false;
attackfacing = "D";
canItemPickup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Alarm 1 is definitely not the place to put this.
MaxStam += (10*stamLevel-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// etc.
luck += (1*luckLevel-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// You know the drill at this point.
defense += (1*defLevel-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Strength level up
str += (1*strLevel-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Something to make sure this event doesn't bug out.
canItemPickup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// HP Level Up Alarm. Set the character's max HP to its new value.
MaxHealth += (10*hpLevel-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != StartMenu
{
    /*
    This controls the action to take if the character approaches the edge of the room.
    If there's a room "outside" of this one in the direction the character left, they go
    to that room. Otherwise, it acts like there's a barrier around the room.
    */
    
//North boundary of the screen...
if (y&lt;0)
{
    //If there is a room north of this one...
    if (global.northroom!=-1)
    {
        //Flag the character as invisible, so they won't show up on the surface.
        visible=false;
        room_goto(global.northroom);  //Go to the northern room.
        //Place the character at their new position
        y=room_height;
        //And get out of this code for this frame.
        exit;
    }
        else
    {
        //Otherwise, pretend there's an invisible wall.
        y=0;
    }
}
    
//South boundary of the screen...
if (y&gt;room_height)
{
    //If there is a room south of this one...
    if (global.southroom!=-1)
    {
        //Flag the character as invisible, so they won't show up on the surface.
        visible=false;
        room_goto(global.southroom);  //Go to the southern room.
        y=0;  //Place the character at their new position
        //And get out of this code for this frame.
        exit;
    }
    else
    {
        //Otherwise, pretend there's an invisible wall.
        y=room_height;
    }
}
    
//West boundary of the screen...
if (x&lt;0)
{
    //If there is a room west of this one...
    if (global.westroom!=-1)
    {
        //Flag the character as invisible, so they won't show up on the surface.
        visible=false;
        room_goto(global.westroom);  //Go to the western room.
        //Place the character at their new position
        x=room_width;
        //And get out of this code for this frame.
        exit;
    }
    else
    {
        //Otherwise, pretend there's an invisible wall.
        x=0;
    }
}
    
// East
if (x&gt;room_width)
{
    //If there is a room east of this one...
    if (global.eastroom!=-1)
    {
        //Flag the character as invisible, so they won't show up on the surface.
        visible=false;
        room_goto(global.eastroom);  //Go to the eastern room.
        x=0;  //Place the character at their new position
        //And get out of this code for this frame.
        exit;
    }
    else
    {
        //Otherwise, pretend there's an invisible wall.
        x=room_width;
    }
}

//Start Menu
if(keyboard_check(vk_enter))
{
    
}
}
else{}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Let's check every single movement key
if ((keyboard_check_pressed(ord('S')))or (keyboard_check_pressed(ord('W'))) or (keyboard_check_pressed(ord('A'))) or (keyboard_check_pressed(ord('D'))))
{
    if alarm[1] = -1
    {
        alarm[1] = 10 // here's the window for pressing the movement key a second time
    }
    else if (facing = lastDir)
    {
        if CurrentStam &gt;= 1
        {
            run = true //Congrats, you pushed the key twice and are now running
        }
    }
}
if (moving = false)
{
    run = false // You can't run and be not moving at the same time, doofus
}
if run = true
{
    if room != StartMenu
    {
        fatigue+=.1;
        levelUpManager_Heron.stamValue += .1;
        if CurrentStam &lt; 1
        {
            run = false;
        }
    }
}
lastDir = facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HurtTile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (CurrentHealth &gt; 0)
{
    if (!Heron.dead)
    {
        alarm[0] = 0
        {
            Damage += 1;
            alarm[0] = 60;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = 1;
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(cutsceneController)
{
    if !Heron.dead
    {
        health_draw();
        stam_draw();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(cutsceneController)
{
if !Heron.dead
{
// Draw the empty stamina bar
draw_sprite_ext(EmptyHealth,0,round(x),round(y)-sprite_height-3,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
// Also the health bar. They're the same sprite, so I need to comment them both.
draw_sprite_ext(EmptyHealth,0,round(x),round(y)-sprite_height-7,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
}
}
//Draw the character's shadow.
draw_sprite_ext(Shadow,0,round(x),round(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha-.325);

//Draw the character's sprite.
draw_sprite_ext(sprite_index,-1,round(x)+0,round(y)+0,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (weapons)
{
    weapons = false;
}
else
{
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>attackPlaceholder</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,48</point>
    <point>26,26</point>
  </PhysicsShapePoints>
</object>
