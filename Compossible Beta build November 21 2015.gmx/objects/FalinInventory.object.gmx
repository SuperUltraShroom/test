<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>inventoryBorder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = StartMenu
{
    visible = 1;
}
image_speed = 0;
numberOfSlots = 12;
slotsInRow = 3;
xStart = 18;
yStart = 52;

full = false; // Is the inventory full? When it reaches capacity, we can't pick up any items.
slotItems[numberOfSlots] = 0; // This is the array used to store what object is in which slot.
slotImages[numberOfSlots] = 0; // This is the array used to tell it what image to show.

for(i = 0 ; i &lt; numberOfSlots ; i += 1) 
{
    slotImages[i]=0; // This sets the sprite to empty.
    slotItems[i]=0; // This sets that inventory slot to 0, empty.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = StartMenu
{
    var drawX, drawY;
    drawX = xStart; // This is used to move the X postion to the next slot.
    drawY = yStart; // This is used to move the Y postion to the next line.

    for(i = 1 ; i &lt;= numberOfSlots ; i+= 1) 
    {

        // Draws the inventory sprite with the subimage of the current slot at the current slot's position
        draw_sprite(sprite_index,slotImages[i],drawX,drawY);

        drawX += sprite_width; // Move to the next slot.

        // Check if it has exceeded the maximum slots for the row, and if so, move to the next one.
        if(i mod slotsInRow = 0)
        {
            drawY += sprite_height; // Move down one row
            drawX = xStart;         // Move to the first slot in the new row.
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,22</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
