<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Things the character will need to be able to gain experience and level up when the time is right.
// If there ends up being redundancy, we may end up making a parent object.
// For now, I feel like we'll just need what we have.

strExpNeeded = 100;
strCurrentExp = 0;

luckExpNeeded = 100;
luckCurrentExp = 0;

stamExpNeeded = 70;
stamCurrentExp = 0;

defExpNeeded = 100;
defCurrentExp = 0;

hpExpNeeded = 200;
hpCurrentExp = 0;

damageValue = 0; // Keep track of damage that Heron has taken.
damageDefValue = 0; // Do the same thing for defense as well.
attackValue = 0 // Keep track of how much hurt Heron's put on the bad guys.
stamValue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Let's keep tabs on Heron's stats. Of course, to do this, we'll
be watching him constantly for damage taken, stamina used, etc. We'll
be passing around quite a few variables for this, so this chunk of
code will be a little confusing looking. Keep it well documented!
*/

/*Total level logic first. Really simple - it is always the lowest stat. There's a use for this, I swear.*/
Heron.totalLevel = min(Heron.hpLevel, Heron.defLevel, Heron.stamLevel, Heron.strLevel, Heron.luckLevel);

/*******************HP LEVELING BLOCK**************************/
if hpExpNeeded = hpCurrentExp // Execute level up code.
{
    Heron.hpLevel++;
    generic_mainChar.alarm[0] = 1; // Triger the alarm that actually adjusts the stats.
    // Congrats, you leveled up - that stat also gets completely refilled.
    Heron.damage = 0;
    hpCurrentExp = 0;
    hpExpNeeded = 200 + (30*Heron.hpLevel);
}
else if hpExpNeeded &lt; hpCurrentExp // Just in case we go over the value.
{
    Heron.hpLevel++;
    generic_mainChar.alarm[0] = 1; // Triger the alarm that actually adjusts the stats.
    // Congrats, you leveled up - that stat also gets completely refilled.
    Heron.damage = 0;
    hpCurrentExp = hpExpNeeded - hpCurrentExp;
    hpExpNeeded = 200 + (30*Heron.hpLevel);
}
else if hpExpNeeded &gt; hpCurrentExp
{
    /*
    Here's where HP gets experience. For the time being, HP gains experience at a rate of 1 exp per
    1 damage taken by a character, so we'll need some way to keep track of damage done to Heron.
    That's relatively easy. Whenever it hits 10, it has to loop back to 0 + whatever the overflow
    may have been.
    */
                
    if damageValue = 1
    {
        hpCurrentExp++;
        damageValue = 0;
    }
    else if damageValue &gt; 1
    {
        tempDamage = damageValue - 1;
        hpCurrentExp++;
        damageValue = tempDamage;
    }           
}
/**************************************************************/


/*******************STAMINA LEVELING BLOCK*********************/    

/* So, Stamina gives 1 experience for every 10 Stamina used. Now
the problem with this comes when you consider that Stamina is
used in a variety of ways instead of being straightforward
like taking damage or dishing damage out. Because of that,
the variable that watches Heron's stamina will be incremented
in various places. In other objects' code, look out for where
"stamValue" has been edited, and you'll know where this code
gets its values. To try and keep it simplistic, I'll list off
some of the places I remember putting it:

generic_mainChar (for running and strong attack)
All Psionics.

Let's begin to keep up with that noise, shall we?*/

if stamExpNeeded = stamCurrentExp
{
    Heron.stamLevel++;
    generic_mainChar.alarm[5] = 1; // Triger the alarm that actually adjusts the stats.
    // Congrats, you leveled up - that stat also gets completely refilled.
    Heron.fatigue = 0;
    stamCurrentExp = 0;
    stamExpNeeded = 70 + (10*Heron.stamLevel);
}
else if stamExpNeeded &lt; stamCurrentExp
{
    Heron.stamLevel++;
    generic_mainChar.alarm[5] = 1; // Triger the alarm that actually adjusts the stats.
    // Congrats, you leveled up - that stat also gets completely refilled.
    Heron.fatigue = 0;
    stamCurrentExp = stamExpNeeded - stamCurrentExp;
    stamExpNeeded = 70 + (10*Heron.stamLevel);
}
else if stamExpNeeded &gt; stamCurrentExp
{
    if stamValue = 10
    {
        stamCurrentExp++;
        stamValue -= 10;
    }
    else if stamValue &gt; 10
    {
        stamCurrentExp++;
        tempStam = stamValue - 10;
        stamValue = tempStam;
    }
}
/**************************************************************/


/******************STRENGTH LEVELING BLOCK*********************/    
if strExpNeeded = strCurrentExp // Execute level up code.
{
    Heron.strLevel++;
    generic_mainChar.alarm[2] = 1; // Triger the alarm that actually adjusts the stats.
    strCurrentExp = 0;
    strExpNeeded = 100 + (15*Heron.strLevel);
}
else if strExpNeeded &lt; strCurrentExp // Just in case we go over the value.
{
    Heron.strLevel++;
    generic_mainChar.alarm[2] = 1; // Triger the alarm that actually adjusts the stats.
    strCurrentExp = strExpNeeded - strCurrentExp;
    strExpNeeded = 100 + (15*Heron.strLevel);
}
else if strExpNeeded &gt; strCurrentExp
{
    /*
    Strength is a lot like Defense and HP, except backwards. We'll keep up with how much damage the character
    does to an enemy before defense is calculated. You get 1 strength experience point per 5 damage done.
    */
                
    if attackValue = 5
    {
        strCurrentExp++;
        attackValue = 0;
    }
    else if attackValue &gt; 5
    {
        tempAttack = attackValue - 5;
        strCurrentExp++;
        attackValue = tempAttack;
    }
            
}
/**************************************************************/


/*******************DEFENSE LEVELING BLOCK*********************/    
if defExpNeeded = defCurrentExp // Execute level up code.
{
    Heron.defLevel++;
    generic_mainChar.alarm[3] = 1; // Triger the alarm that actually adjusts the stats.
    defCurrentExp = 0;
    defExpNeeded = 100 + (10*Heron.defLevel);
}
else if defExpNeeded &lt; defCurrentExp // Just in case we go over the value.
{
    Heron.defLevel++;
    generic_mainChar.alarm[3] = 1; // Triger the alarm that actually adjusts the stats.
    defCurrentExp = defExpNeeded - defCurrentExp;
    defExpNeeded = 100 + (15*Heron.defLevel);
}
else if defExpNeeded &gt; defCurrentExp
{
    /*
    Defense levels up on the same principle as HP - the character taking damage. Basically this is just
    the HP level up code copied and pasted, but we'll need to have a different value to keep up with defense since
    HP's will constantly reset itself when it exceeds 10.
                
    Just as a reminder, Defense gains 1 exp per 10 damage taken.
    */
                
    if damageValue = 10
    {
        defCurrentExp++;
        damageValue = 0;
    }
    else if damageDefValue &gt; 10
    {
        tempDefDamage = damageDefValue - 10;
        defCurrentExp++;
        damageDefValue = tempDefDamage;
    }
            
}
/**************************************************************/


/*******************LUCK LEVELING BLOCK************************/    
if Heron.luckLevel = Heron.totalLevel || Heron.luckLevel = Heron.totalLevel+1
{
// We got lucky.
}
/**************************************************************/


// Thus ends the complex chain of logic that allows Heron to level up his stats. 
// We'll have a manager like this for every character!
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
